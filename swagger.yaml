openapi: 3.0.0
info:
  title: FlairWarsAPI
  version: '1.0'
  contact:
    name: BlastoGypsy
    email: blastogypsy@gmail.com
  description: |-
    An API for FlairWars bots!

    ### Authorization
    Authorization is done using an Authorization Header. In the body of the header, please use "Basic YOUR-API-KEY-HERE". To get more application permissions, at the moment, you must request them by directly contacting @BlastoGypsy, and processes for automating this are being engineered and worked on otherwise.
servers:
  - url: 'https://api.flairwars.com'
paths:
  /users:
    get:
      summary: GET /users
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
      operationId: get-users
      parameters:
        - schema:
            type: string
          in: query
          name: RedditUsername
          description: Query with a user's Reddit username
        - schema:
            type: string
          in: query
          name: FlairwarsColor
          description: Query with a user's Flairwars Color
        - schema:
            type: string
          in: query
          name: DiscordMemberID
          description: Query with a user's Discord ID
      description: Retrieve user information
    post:
      summary: POST /users
      operationId: post-users
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '409':
          description: 'Conflict: User exists'
        '500':
          description: 'Internal Server Error: Database Communication Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                DiscordMemberID:
                  type: string
                FlairwarsColor:
                  type: string
                RedditUsername:
                  type: string
              required:
                - DiscordMemberID
      description: Create a new user
      tags:
        - User
      parameters: []
      security:
        - Authorization: []
  '/users/id/{DiscordID}':
    parameters:
      - schema:
          type: string
        name: DiscordID
        in: path
        required: true
        description: User's Discord ID
    put:
      summary: PUT /users/id/DiscordID
      operationId: put-users-id-DiscordID
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: Update a user's Flairwars Color and Reddit Username
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                RedditUsername:
                  type: string
                FlairwarsColor:
                  type: string
      tags:
        - User
      security:
        - Authorization: []
  /applications:
    post:
      summary: POST /applications
      operationId: post-api_auth
      responses:
        '201':
          description: Application Secret
        '400':
          description: 'Bad Request: Incomplete body'
        '409':
          description: 'Conflict: App with name already exists'
      description: Register your application
      tags:
        - Application
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ApplicationName:
                  type: string
              required:
                - ApplicationName
        description: Send your application name. This will be used to log your application's request and manage your application's permissions.
    parameters: []
  '/applications/{AppName}':
    parameters:
      - schema:
          type: string
        name: AppName
        in: path
        required: true
    put:
      summary: PUT /applications/AppName
      operationId: put-api_auth-AppName
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      tags:
        - Application
      description: Grant an application additional permissions
      parameters:
        - schema:
            type: string
          in: query
          name: action
          description: The action you are performing (either add or remove)
          required: true
      security:
        - Authorization: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Permissions:
                  type: string
  /currencies:
    get:
      summary: GET /currencies
      tags:
        - Currency
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/currency'
      operationId: get-currency
      description: Get currency information
      parameters:
        - schema:
            type: string
          in: query
          name: Name
          description: Query by name
        - schema:
            type: string
          in: query
          name: Symbol
          description: Query by symbol
    post:
      summary: POST /currencies
      operationId: post-currency
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      description: Create a currency
      security:
        - Authorization: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  type: string
                Symbol:
                  type: string
              required:
                - Name
                - Symbol
        description: Request body for creating a currency
      tags:
        - Currency
    parameters: []
  '/currencies/{CurrencyID}':
    parameters:
      - schema:
          type: string
        name: CurrencyID
        in: path
        required: true
    get:
      summary: GET /currencies/CurrencyID
      tags:
        - Currency
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/currency'
      operationId: get-currency-CurrencyID
      description: Retrieve a specific currency
    delete:
      summary: DELETE /currencies/CurrencyID
      operationId: delete-currency-CurrencyID
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: Remove a currency
      security:
        - Authorization: []
      tags:
        - Currency
    put:
      summary: PUT /currencies/CurrencyID
      operationId: put-currency-CurrencyID
      responses:
        '200':
          description: OK
      description: Update currency information
      tags:
        - Currency
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  type: string
                Symbol:
                  type: string
        description: New info
      security:
        - Authorization: []
  '/currencies/{CurrencyID}/mint':
    parameters:
      - schema:
          type: string
        name: CurrencyID
        in: path
        required: true
    put:
      summary: PUT /currencies/CurrencyID/mint
      operationId: put-currency-CurrencyID-mint
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - Authorization: []
      tags:
        - Currency
      description: Add money to a currency's stockpile
      parameters:
        - schema:
            type: string
          in: query
          name: amount
          required: true
          description: The amount to add
    delete:
      summary: DELETE /currencies/CurrencyID/mint
      operationId: delete-currency-CurrencyID-mint
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - Authorization: []
      tags:
        - Currency
      description: Remove money from a currency's stockpile
      parameters:
        - schema:
            type: string
          in: query
          name: amount
          description: The amount to remove
  /transactions:
    get:
      summary: GET /transactions
      tags:
        - Transaction
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/transaction'
      operationId: get-transaction
      description: Get all transactions or filter them with a query
      parameters:
        - schema:
            type: string
          in: query
          name: fromDate
          description: Get transactions since this date (formatted YYYY-MM-DD)
        - schema:
            type: string
          in: query
          name: toDate
          description: Get transactions up until this date (formatted YYYY-MM-DD)
        - schema:
            type: string
          in: query
          name: lessThan
          description: Get transactions whose amount is less than this number
        - schema:
            type: string
          in: query
          name: greaterThan
          description: Get transactions whose amount is greater than this number
        - schema:
            type: string
          in: query
          name: type
          description: Get transactions of a given type
        - schema:
            type: string
          in: query
          name: from
          description: Get transactions that originated from this entity
        - schema:
            type: string
          in: query
          name: to
          description: Get transactions that went to this entity
    post:
      summary: POST /transactions
      operationId: post-transaction
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      tags:
        - Transaction
      security:
        - Authorization: []
      description: |-
        Create a new transaction.

        # Transaction Types:
         * Withdrawal - Stockpile to User (Same currency type) - Only required fields needed
         * Deposit - User to Stockpile (Same currency type) - Only required fields needed
         * UserTransfer - User to User (Same currency type) - Required Fields and 'FromCurrency' and 'ToCurrency' fields needed
         * BankExchange - Stockpile to stockpile (different currency types) - Only required fields needed
         * UserExchange - User to Stockpile (different currency types) - Required Fields and 'FromCurrency' and 'ToCurrency' fields needed. This function exchanges the FromCurrency to the ToCurrency for a User. 'To' should be the same as 'ToCurrency'

        ## Description Field
        This field should be used to store any transaction data that you may need, like Item IDs or expiration dates for items. You have to handle what happens with this data, the Description field is simply there for storage of data.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Type:
                  type: string
                From:
                  type: string
                To:
                  type: string
                Amount:
                  type: number
                Desc:
                  type: string
                FromCurrency:
                  type: string
                ToCurrency:
                  type: string
              required:
                - Type
                - From
                - To
                - Amount
                - Desc
        description: |-
          Valid Types:
           * Withdrawal - From should be CurrencyID, To should be UserID
           * Deposit - From should be UserID, To should be CurrencyID
           * UserTransfer - From should be UserID, To should be UserID, FromCurrency should be CurrencyID, ToCurrency should be CurrencyID
           * BankExchange - From should be CurrencyID, To should be CurrencyID
           * UserExchange - From should be UserID, To should be CurrencyID, FromCurrency should be CurrencyID, ToCurrency should be CurrencyID
    parameters: []
components:
  schemas:
    user:
      title: User
      type: object
      description: User data pulled from the database
      x-examples:
        Example:
          DiscordMemberID: '000000000000000000'
          Color: red
          RedditName: username
      properties:
        DiscordMemberID:
          type: string
        FlairwarsColor:
          type: string
        RedditUsername:
          type: string
        Currencies:
          type: array
          items:
            type: object
            properties:
              CurrencyType:
                type: string
              Amount:
                type: integer
      required:
        - DiscordMemberID
    currency:
      title: Currency
      type: object
      description: Model of a Currency
      properties:
        id:
          type: string
        Name:
          type: string
        Symbol:
          type: string
        RemainingStockpile:
          type: integer
        Stockpile:
          type: integer
        Mint:
          type: string
    transaction:
      title: Transaction
      type: object
      description: This is the model of a Transaction.
      properties:
        DateActioned:
          type: string
        Type:
          type: string
        From:
          type: string
        To:
          type: string
        Desc:
          type: string
        Amount:
          type: number
        ID:
          type: string
        FromCurrency:
          type: string
        ToCurrency:
          type: string
      required:
        - DateActioned
        - Type
        - From
        - To
        - Desc
        - Amount
        - ID
  securitySchemes:
    Authorization:
      name: authorization
      type: apiKey
      in: header
tags:
  - name: User
  - name: Application
  - name: Currency
  - name: Transaction
